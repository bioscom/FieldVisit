using System;
using System.Web.Security;
using System.Collections.Generic;
using System.Web;

public partial class _Default : aspnetPage
{
    protected void Page_Load(object sender, EventArgs e)
    {
        string sRedirect = "";

        if (!IsPostBack)
        {
            string sMsg = this.reqQueryMsg();
            string sRet = "";
            switch (sMsg)
            {
                case "sLO":
                    sRedirect = "~/Support/logout.aspx?Msg=sLO";
                    break;

                case "sTl":
                    sRet = useWindowsAuth();
                    if (sRet != "")
                    {
                        sRedirect = "~/Support/pageDenied.aspx?Msg=" + sRet;
                    }
                    break;

                default:
                    sRet = useWindowsAuth();
                    if (sRet == "NotFound")
                    {
                        Response.Redirect("~/Login.aspx");
                    }

                    if (sRet == "Relogin")
                    {
                        Response.Redirect("~/Default.aspx");
                    }

                    if (sRet != "")
                    {
                        sRedirect = "~/Support/pageDenied.aspx?Msg=" + sRet;
                    }
                    break;
            }
        }

        if (sRedirect != "")
        {
            Response.Redirect(sRedirect);
        }
    }

    private string useWindowsAuth()
    {
        string sRet = "Err";
        try
        {
            loginUser oLogin = new loginUser();
            loginUser.loginRet me = oLogin.verifyAppUser();

            //Note: loginRet, a member of the loginUser Class, returns three objects; statusx, eAppUserInfo and eIWHUserInfo
            //User to be authenticated could be found on eAppUserInfo or eIWHUserInfo object, 
            //therefore test eAppUserInfo and eIWHUserInfo to see where login user is found.

            //if (!string.IsNullOrEmpty(me.eAppUserInfo.m_sUserName))
            if (me.eStatus == loginUser.statusx.idIsNotFound)
            {
                sRet = "NotFound";
            }
            else
            {
                if (me.eAppUserInfo != null)
                {
                    sRet = LogMeIn(me, sRet);
                }
                else if (me.eAppUserInfo == null)
                {
                    if (me.eIWHUserInfo != null)
                    {
                        //If the above condition is true, automatically register this user and assign him an Activity Initiator's role
                        //Call the funtion or method that register user from the add user page
                        bool success = appUsers.CreateUserAccount(me.eIWHUserInfo.m_sUserName, me.eIWHUserInfo.m_sFullName, me.eIWHUserInfo.m_sUserMail, (int)appUsersRoles.userRole.initiator, me.eIWHUserInfo.m_sRefInd);
                        if (success)
                        {
                            //ajaxWebExtension.showJscriptAlert(Page, this, "Welcome, in case you need to change your profile\nplease call the support shown on this web page.");

                            //TODO:    Revisit this place
                            //Relogin to recreate session
                            sRet = LogMeIn(me, sRet);
                        }
                    }
                    else if (me.eIWHUserInfo == null)
                    {
                        sRet = "NotFound";

                        //sendMail loginUserSendMail = new sendMail(new structUserMailIdx(Apps.LoginIDNoDomain(HttpContext.Current.User.Identity.Name), HttpContext.Current.User.Identity.Name, ""));

                        //List<structUserMailIdx> receivers = new List<structUserMailIdx>();
                        //receivers.Add(new structUserMailIdx(AppConfiguration.AdminUserName, AppConfiguration.AdminEmail, ""));
                        //receivers.Add(new structUserMailIdx(AppConfiguration.ProdAdminUserName, AppConfiguration.ProdAdminEmail, ""));
                        //receivers.Add(new structUserMailIdx(AppConfiguration.ProdSupportUserName, AppConfiguration.ProdSupportEmail, ""));

                        //loginUserSendMail.ProfileNotFound(receivers);

                        //ajaxWebExtension.showJscriptAlert(Page, this, "Profile not found, login through please contact administrator");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.Fail(ex.TargetSite.Name + "\n \n" + ex.StackTrace + "\n \n" + ex.Message.ToString());
        }
        return sRet;
    }
    
    private string LogMeIn(loginUser.loginRet me, string sRet)
    {
        switch (me.eStatus)
        {
            case loginUser.statusx.loginSucceed:
                
                if (me.eAppUserInfo == null)
                {
                    FormsAuthentication.RedirectFromLoginPage(me.eIWHUserInfo.m_sUserName, true);
                    sRet = "Relogin";
                }
                else
                {
                    FormsAuthentication.RedirectFromLoginPage(me.eAppUserInfo.m_sUserName, true);
                    sRet = "";
                }
                
                break;
            case loginUser.statusx.idIsNotFound:
                sRet = "eId";
                break;
            case loginUser.statusx.loginFailed:
                sRet = "Err";
                break;
            case loginUser.statusx.statusDisabld:
                sRet = "nId";
                break;
            case loginUser.statusx.statusUnKnown:
                sRet = "nId";
                break;
            case loginUser.statusx.statusLocked:
                sRet = "lId";
                break;
        }
        return sRet;
    }
}