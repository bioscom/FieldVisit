using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

/// <summary>
/// Summary description for StoredProcedureLean
/// </summary>
public class StoredProcedureLean
{
    public StoredProcedureLean()
    {
        //
        // 
        //
    }

    #region   //********************* Lean Projects Query Management ********************************

    public static string InsertLeanProject()
    {
        //string sql = "INSERT INTO LEAN_PROJECTS (TITLE, YYEAR, IDTYPE, IDDEPARTMENT, FUNCTIONID, SPONSORID, CHAMPIONID, FOCALPOINTID, MANAGERID, COACHID, ";
        //sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, POTENTIALBLOCKERS, COMMENTS, CTREDUCTION, COSTREDUCTION, PRODUCTIONBARREL, NUMBERRS, BENEFITS, ";
        //sql += "POTENTIALBENFTCOMMENTS, IDENTIFYSD, IDENTIFYED, ELIMINATESD, ELIMINATEED, SUSTAINSD, SUSTAINED) ";
        //sql += "VALUES (:sTitle, :iYear, :iType, :iDept, :iFunction, :iSponsor, :iChampion, :iFocalPoint, :iManager, :iCoach, :sOpportunity, ";
        //sql += ":sBusinessCase, :sGoals, :sInscope, :sOutScope, :sPotentialBlokers, :sComments, :sCTReduction, :sCostReduction, :sProductionBarrel, ";
        //sql += ":sNumber, :sBenefits, :sPotentialBenftComments, :sIdentifySD, :sIdentifyED, :sEliminateSD, :sEliminateED , :sSustainSD, :sSustainED)";

        string sql = "INSERT INTO LEAN_PROJECTS (TITLE, YYEAR, IDTYPE, IDDEPARTMENT, FUNCTIONID, SPONSORID, CHAMPIONID, FOCALPOINTID, MANAGERID, ";
        sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, POTENTIALBLOCKERS, COMMENTS, CTREDUCTION, COSTREDUCTION, PRODUCTIONBARREL, NUMBERRS, BENEFITS, ";
        sql += "POTENTIALBENFTCOMMENTS, IDENTIFYSD, IDENTIFYED, ELIMINATESD, ELIMINATEED, SUSTAINSD, SUSTAINED) ";
        sql += "VALUES (:sTitle, :iYear, :iType, :iDept, :iFunction, :iSponsor, :iChampion, :iFocalPoint, :iManager, :sOpportunity, ";
        sql += ":sBusinessCase, :sGoals, :sInscope, :sOutScope, :sPotentialBlokers, :sComments, :sCTReduction, :sCostReduction, :sProductionBarrel, ";
        sql += ":sNumber, :sBenefits, :sPotentialBenftComments, :sIdentifySD, :sIdentifyED, :sEliminateSD, :sEliminateED , :sSustainSD, :sSustainED)";

        return sql;
    }

    public static string UpdateLeanProject()
    {
        //string sql = "UPDATE LEAN_PROJECTS SET TITLE = :sTitle, YYEAR = :iYear, IDTYPE = :iType, IDDEPARTMENT = :iDept, FUNCTIONID = :iFunction, ";
        //sql += "SPONSORID = :iSponsor, CHAMPIONID = :iChampion, MANAGERID = :iManager, COACHID = :iCoach, OPPORTUNITY = :sOpportunity, ";
        //sql += "BUZCASE = :sBusinessCase, GOALS = :sGoals, INSCOPE = :sInscope, OUTSCOPE = :sOutScope, POTENTIALBLOCKERS = :sPotentialBlokers, ";
        //sql += "COMMENTS = :sComments, CTREDUCTION = :sCTReduction, COSTREDUCTION = :sCostReduction, PRODUCTIONBARREL = :sProductionBarrel, ";
        //sql += "NUMBERRS = :sNumber, BENEFITS = :sBenefits, POTENTIALBENFTCOMMENTS = :sPotentialBenftComments, IDENTIFYSD = :sIdentifySD, ";
        //sql += "IDENTIFYED = :sIdentifyED, ELIMINATESD = :sEliminateSD, ELIMINATEED = :sEliminateED, SUSTAINSD = :sSustainSD, SUSTAINED = :sSustainED WHERE IDPROJECT = :lProjectId";

        string sql = "UPDATE LEAN_PROJECTS SET TITLE = :sTitle, YYEAR = :iYear, IDTYPE = :iType, IDDEPARTMENT = :iDept, FUNCTIONID = :iFunction, ";
        sql += "SPONSORID = :iSponsor, CHAMPIONID = :iChampion, MANAGERID = :iManager, OPPORTUNITY = :sOpportunity, ";
        sql += "BUZCASE = :sBusinessCase, GOALS = :sGoals, INSCOPE = :sInscope, OUTSCOPE = :sOutScope, POTENTIALBLOCKERS = :sPotentialBlokers, ";
        sql += "COMMENTS = :sComments, CTREDUCTION = :sCTReduction, COSTREDUCTION = :sCostReduction, PRODUCTIONBARREL = :sProductionBarrel, ";
        sql += "NUMBERRS = :sNumber, BENEFITS = :sBenefits, POTENTIALBENFTCOMMENTS = :sPotentialBenftComments, IDENTIFYSD = :sIdentifySD, ";
        sql += "IDENTIFYED = :sIdentifyED, ELIMINATESD = :sEliminateSD, ELIMINATEED = :sEliminateED, SUSTAINSD = :sSustainSD, SUSTAINED = :sSustainED WHERE IDPROJECT = :lProjectId";

        return sql;
    }


    public static string DeleteLeanProject()
    {
        string sql = "DELETE FROM LEAN_PROJECTS WHERE IDPROJECT = :lProjectId";
        return sql;
    }

    public static string DeleteImprvRec = "DELETE FROM LEAN_PROJECT_IMPR_REC WHERE IDPROJECT = :lProjectId";
    public static string DeleteBenefits = "DELETE FROM LEAN_BENEFIT_ACTUAL WHERE IDPROJECT = :lProjectId";
    public static string DeleteVsmAsIs = "DELETE FROM LEAN_VSMASIS WHERE IDPROJECT = :lProjectId";
    public static string DeleteIdentify = "DELETE FROM LEAN_IDENTIFY WHERE IDPROJECT = :lProjectId";
    public static string DeleteEliminate = "DELETE FROM LEAN_ELIMINATE WHERE IDPROJECT = :lProjectId";
    public static string DeleteSustain = "DELETE FROM LEAN_SUSTAIN WHERE IDPROJECT = :lProjectId";

    public static string getLeanProjects()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, ";
        sql += "SPONSOR.FULLNAME, SPONSOR.EMAIL, MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        //sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL, ";
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, ";
        sql += "LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, ";
        sql += "LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, ";
        sql += "LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "LEFT OUTER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID ORDER BY LEAN_PROJECTS.TITLE";
        //sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID";

        return sql;
    }

    public static string getLeanProjectByProjectId()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, ";
        sql += "SPONSOR.FULLNAME, SPONSOR.EMAIL, MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        //sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL, ";
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, ";
        sql += "LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, ";
        sql += "LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, ";
        sql += "LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId";
        //sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID";

        return sql;
    }

    public static string getLeanProjectsByYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, ";
        sql += "SPONSOR.FULLNAME, SPONSOR.EMAIL, MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        //sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL, ";
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, ";
        sql += "LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, ";
        sql += "LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, ";
        sql += "LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID ";
        //sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID ";
        sql += "WHERE LEAN_PROJECTS.YYEAR = :iYear ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    public static string getLeanProjectsByFunction()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, ";
        sql += "SPONSOR.FULLNAME, SPONSOR.EMAIL, MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        //sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL, ";
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, ";
        sql += "LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, ";
        sql += "LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, ";
        sql += "LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID ";
        //sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID ";
        sql += "WHERE CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    public static string getLeanProjectsByFunctionYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, ";
        sql += "SPONSOR.FULLNAME, SPONSOR.EMAIL, MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        //sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL, ";
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, ";
        sql += "LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, ";
        sql += "LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, ";
        sql += "LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID ";
        //sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID ";
        sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear) AND (CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    //Select Projects By Roles


    private static string getMyLeanProjectMaster()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.FOCALPOINTID, SPONSOR.USERID, SPONSOR.FULLNAME, SPONSOR.EMAIL, "; 
        sql += "LEAN_PROJECTS.OPPORTUNITY, LEAN_PROJECTS.BUZCASE, LEAN_PROJECTS.GOALS, LEAN_PROJECTS.INSCOPE, LEAN_PROJECTS.OUTSCOPE, LEAN_PROJECTS.POTENTIALBLOCKERS, LEAN_PROJECTS.COMMENTS, LEAN_PROJECTS.CTREDUCTION, LEAN_PROJECTS.COSTREDUCTION, ";
        sql += "LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS, LEAN_PROJECTS.BENEFITS, LEAN_PROJECTS.POTENTIALBENFTCOMMENTS, LEAN_PROJECTS.IDENTIFYSD, LEAN_PROJECTS.IDENTIFYED, ";
        sql += "LEAN_PROJECTS.ELIMINATESD, LEAN_PROJECTS.ELIMINATEED, LEAN_PROJECTS.SUSTAINSD, LEAN_PROJECTS.SUSTAINED, ";
        sql += "CHAMPION.USERID AS CHAMPIONUSERID, CHAMPION.FULLNAME AS CHAMPIONFULLNAME, CHAMPION.EMAIL AS CHAMPIONEMAIL, ";
        sql += "MANAGER.USERID AS MANAGERUSERID, MANAGER.FULLNAME AS MANAGERFULLNAME, MANAGER.EMAIL AS MANAGEREMAIL, ";
        sql += "COACH.USERID AS COACHUSERID, COACH.FULLNAME AS COACHFULLNAME, COACH.EMAIL AS COACHEMAIL ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON LEAN_PROJECTS.IDDEPARTMENT = COMMON_DEPARTMENT.IDDEPARTMENT ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJECTS.IDTYPE = LEAN_PROJTYPE.IDTYPE ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_PROJECTS.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT SPONSOR ON LEAN_PROJECTS.SPONSORID = SPONSOR.USERID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT CHAMPION ON LEAN_PROJECTS.CHAMPIONID = CHAMPION.USERID ";
        sql += "LEFT OUTER JOIN PROD_USERMGT MANAGER ON LEAN_PROJECTS.MANAGERID = MANAGER.USERID ";
        sql += "INNER JOIN LEAN_COACH ON LEAN_COACH.IDPROJECT = LEAN_PROJECTS.IDPROJECT ";
        sql += "LEFT OUTER JOIN PROD_USERMGT COACH ON LEAN_COACH.USERID = COACH.USERID ";

        return sql;
    }
    public static string getMyLeanProjects()
    {
        string sql = getMyLeanProjectMaster();
        sql += "WHERE ((LEAN_PROJECTS.CHAMPIONID = :iChampionId) OR (LEAN_PROJECTS.SPONSORID = :iSponsorId) ";
        sql += "OR (LEAN_PROJECTS.FOCALPOINTID = :iFocalPointId) OR (LEAN_COACH.USERID = :iCoachId)) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }
    public static string getMyLeanProjectByYear()
    {
        string sql = getMyLeanProjectMaster();
        sql += "WHERE ((LEAN_PROJECTS.CHAMPIONID = :iChampionId) OR (LEAN_PROJECTS.SPONSORID = :iSponsorId) ";
        sql += "OR (LEAN_PROJECTS.FOCALPOINTID = :iFocalPointId) OR (LEAN_COACH.USERID = :iCoachId)) ";
        sql += "AND (LEAN_PROJECTS.YYEAR = :iYear) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    public static string getMyLeanProjectByFunction()
    {
        string sql = getMyLeanProjectMaster();
        sql += "WHERE ((LEAN_PROJECTS.CHAMPIONID = :iChampionId) OR (LEAN_PROJECTS.SPONSORID = :iSponsorId) ";
        sql += "OR (LEAN_PROJECTS.FOCALPOINTID = :iFocalPointId) OR (LEAN_COACH.USERID = :iCoachId)) ";
        sql += "AND (LEAN_PROJECTS.FUNCTIONID = :iFunctionId) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    public static string getMyLeanProjectByYearFunction()
    {
        string sql = getMyLeanProjectMaster();
        sql += "WHERE ((LEAN_PROJECTS.CHAMPIONID = :iChampionId) OR (LEAN_PROJECTS.SPONSORID = :iSponsorId) ";
        sql += "OR (LEAN_PROJECTS.FOCALPOINTID = :iFocalPointId) OR (LEAN_COACH.USERID = :iCoachId)) ";
        sql += "AND (LEAN_PROJECTS.YYEAR = :iYear) AND (LEAN_PROJECTS.FUNCTIONID = :iFunctionId) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    #endregion


    #region  //********************************************

    public static string getLeanProjectsYear()
    {
        string sql = "SELECT DISTINCT YYEAR FROM LEAN_PROJECTS ORDER BY YYEAR"; // DESC

        return sql;
    }

    public static string getProjectFunctions()
    {
        string sql = "SELECT FUNCTIONID, FUNCTION FROM cpdms_functions where FUNCTIONID IN ";
        sql += "(SELECT LEAN_PROJECTS.FUNCTIONID FROM CPDMS_FUNCTIONS ";
        sql += "INNER JOIN LEAN_PROJECTS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "WHERE LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string getTotalProjectsByFunctionYear()
    {
        string sql = "SELECT LEAN_PROJECTS.FUNCTIONID ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "WHERE (CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string getTotalProjectsByYear()
    {
        string sql = "SELECT * FROM LEAN_PROJECTS WHERE (YYEAR = :iYear)";
        return sql;
    }

    public static string getTotalCostReductionPerYear()
    {
        //string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.COST_SAVINGS) AS COST_SAVINGS FROM LEAN_BENEFIT_ACTUAL ";
        //sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        //sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear)";
        string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.COST_SAVINGS) AS COSTSAVINGS FROM LEAN_BENEFIT_ACTUAL WHERE (YYEAR = :iYear)";
        
        return sql;
    }

    public static string getTotalCycleTimeReductionPerYear()
    {
        //string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.CT_SAINGS) AS CT_SAINGS FROM LEAN_BENEFIT_ACTUAL ";
        //sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        //sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear)";
        string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.CT_SAINGS) AS CT_SAINGS FROM LEAN_BENEFIT_ACTUAL WHERE (YYEAR = :iYear)";

        return sql;
    }

    public static string getTotalNoOfProductionBarrelPerYear()
    {
        //string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL) AS PRODUCTIONBARREL FROM LEAN_BENEFIT_ACTUAL ";
        //sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        //sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear)";

        string sql = "SELECT SUM(LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL) AS PRODUCTIONBARREL FROM LEAN_BENEFIT_ACTUAL WHERE (YYEAR = :iYear)";

        return sql;
    }

    #endregion

    #region //============================== Identify Queries ========================

    public static string getProjectIdentifyByProjectId()
    {
        string sql = "SELECT IDIDENTIFY, IDPROJECT, VSMID, KICKOFF_MEET, KICK_OFF_MEET_V, SIGNOFF_CHARTERS, SIGNOFF_CHARTER_V, ";
        sql += "PROCESS_WALK, PROCESS_WALK_V, VSM, VSM_V, IDENTIFY_WORKDONE FROM LEAN_IDENTIFY WHERE IDPROJECT = :lProjectId";

        return sql;
    }

    public static string InsertIdentify()
    {
        string sql = "INSERT INTO LEAN_IDENTIFY (IDPROJECT, KICK_OFF_MEET_V, SIGNOFF_CHARTER_V, PROCESS_WALK_V, VSM_V) ";
        sql += "VALUES (:lProjectId, :sKickOffMeetingV, :sCharterSignOffV, :sProcessWalkV, :sVSMV) ";

        return sql;
    }

    public static string UpdateIdentify()
    {
        string sql = "UPDATE LEAN_IDENTIFY SET KICK_OFF_MEET_V = :sKickOffMeetingV, SIGNOFF_CHARTER_V = :sCharterSignOffV, ";
        sql += "PROCESS_WALK_V = :sProcessWalkV, VSM_V = :sVSMV  WHERE IDPROJECT = :lProjectId ";

        return sql;
    }


    public static string getIdentifyWorkDoneByFunctionYear()
    {
        string sql = "SELECT LEAN_IDENTIFY.IDIDENTIFY, LEAN_IDENTIFY.VSMID, LEAN_IDENTIFY.KICKOFF_MEET, LEAN_IDENTIFY.KICK_OFF_MEET_V, ";
        sql += " LEAN_IDENTIFY.SIGNOFF_CHARTERS, LEAN_IDENTIFY.SIGNOFF_CHARTER_V, LEAN_IDENTIFY.PROCESS_WALK, LEAN_IDENTIFY.PROCESS_WALK_V, ";
        sql += " LEAN_IDENTIFY.VSM, LEAN_IDENTIFY.VSM_V, LEAN_IDENTIFY.IDENTIFY_WORKDONE, ";
        sql += "LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_IDENTIFY ON LEAN_PROJECTS.IDPROJECT = LEAN_IDENTIFY.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.FUNCTIONID = :iFunctionId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string getIdentifyWorkDoneByProjectYear()
    {
        string sql = "SELECT LEAN_IDENTIFY.IDIDENTIFY, LEAN_IDENTIFY.VSMID, LEAN_IDENTIFY.KICKOFF_MEET, LEAN_IDENTIFY.KICK_OFF_MEET_V, ";
        sql += " LEAN_IDENTIFY.SIGNOFF_CHARTERS, LEAN_IDENTIFY.SIGNOFF_CHARTER_V, LEAN_IDENTIFY.PROCESS_WALK, LEAN_IDENTIFY.PROCESS_WALK_V, ";
        sql += " LEAN_IDENTIFY.VSM, LEAN_IDENTIFY.VSM_V, LEAN_IDENTIFY.IDENTIFY_WORKDONE, ";
        sql += "LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_IDENTIFY ON LEAN_PROJECTS.IDPROJECT = LEAN_IDENTIFY.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.IDPROJECT = :lProjectId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string WorkDone()
    {
        string sql = "SELECT CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_ELIMINATE.PIP_V, ";
        sql += "LEAN_ELIMINATE.HOLD_KAIZEN_EVENT_V, LEAN_ELIMINATE.SPONSOR_APPROVE_REC_V, LEAN_ELIMINATE.IMPLEMENT_V, LEAN_IDENTIFY.KICK_OFF_MEET_V, ";
        sql += "LEAN_IDENTIFY.SIGNOFF_CHARTER_V, LEAN_IDENTIFY.PROCESS_WALK_V, LEAN_IDENTIFY.VSM_V, LEAN_SUSTAIN.VISUAL_MEASURES_V, LEAN_SUSTAIN.HANDOVER_V ";
        sql += "FROM CPDMS_FUNCTIONS ";
        sql += "INNER JOIN LEAN_PROJECTS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN LEAN_ELIMINATE ON LEAN_PROJECTS.IDPROJECT = LEAN_ELIMINATE.IDPROJECT ";
        sql += "LEFT OUTER JOIN LEAN_IDENTIFY ON LEAN_PROJECTS.IDPROJECT = LEAN_IDENTIFY.IDPROJECT ";
        sql += "LEFT OUTER JOIN LEAN_SUSTAIN ON LEAN_PROJECTS.IDPROJECT = LEAN_SUSTAIN.IDPROJECT ";
        sql += "WHERE LEAN_PROJECTS.YYEAR = :iYear ORDER BY CPDMS_FUNCTIONS.FUNCTION";

        return sql;
    }

    public static string CompletedAndOngoingProjectsByFunction()
    {
        string sql = "SELECT LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, CPDMS_FUNCTIONS.FUNCTION, LEAN_ELIMINATE.IMPLEMENT_V, LEAN_BENEFIT_ACTUAL.CT_SAINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.COST_SAVINGS, LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL, LEAN_BENEFIT_ACTUAL.NUMBERR, LEAN_PROJECTS.CTREDUCTION, ";
        sql += "LEAN_PROJECTS.COSTREDUCTION, LEAN_PROJECTS.PRODUCTIONBARREL, LEAN_PROJECTS.NUMBERRS FROM LEAN_PROJECTS ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "INNER JOIN LEAN_ELIMINATE ON LEAN_PROJECTS.IDPROJECT = LEAN_ELIMINATE.IDPROJECT ";
        sql += "LEFT OUTER JOIN LEAN_BENEFIT_ACTUAL ON LEAN_BENEFIT_ACTUAL.IDPROJECT = LEAN_PROJECTS.IDPROJECT ";
        sql += "WHERE LEAN_PROJECTS.YYEAR = :iYear ";
        sql += "AND (LEAN_ELIMINATE.IMPLEMENT_V = :iCompleted OR LEAN_ELIMINATE.IMPLEMENT_V = :iOngoing OR LEAN_ELIMINATE.IMPLEMENT_V IS NULL OR LEAN_ELIMINATE.IMPLEMENT_V = 0) ";
        sql += "AND CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId";

        return sql;
    }

    public static string getProjectBenefits()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, ";
        sql += "LEAN_PROJECTS.TITLE, ";
        sql += "LEAN_BENEFIT_ACTUAL.ACTUALID, ";
        sql += "LEAN_BENEFIT_ACTUAL.YYEAR, ";
        sql += "LEAN_BENEFIT_ACTUAL.CT_SAINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.COST_SAVINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL, ";
        sql += "LEAN_BENEFIT_ACTUAL.OTHER_BENEFITS, ";
        sql += "LEAN_BENEFIT_ACTUAL.NUMBERR, ";
        sql += "LEAN_BENEFIT_ACTUAL.COMMENTS ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_BENEFIT_ACTUAL ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        sql += "WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId";

        return sql;
    }

    public static string getProjectBenefitsByYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, ";
        sql += "LEAN_PROJECTS.TITLE, ";
        sql += "LEAN_BENEFIT_ACTUAL.ACTUALID, ";
        sql += "LEAN_BENEFIT_ACTUAL.YYEAR, ";
        sql += "LEAN_BENEFIT_ACTUAL.CT_SAINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.COST_SAVINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL, ";
        sql += "LEAN_BENEFIT_ACTUAL.OTHER_BENEFITS, ";
        sql += "LEAN_BENEFIT_ACTUAL.NUMBERR, ";
        sql += "LEAN_BENEFIT_ACTUAL.COMMENTS ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_BENEFIT_ACTUAL ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        sql += "WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId AND LEAN_BENEFIT_ACTUAL.YYEAR = :iYear";

        return sql;
    }

    public static string getProjectBenefitsByYear2()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, ";
        sql += "LEAN_PROJECTS.TITLE, ";
        sql += "LEAN_BENEFIT_ACTUAL.ACTUALID, ";
        sql += "LEAN_BENEFIT_ACTUAL.YYEAR, ";
        sql += "LEAN_BENEFIT_ACTUAL.CT_SAINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.COST_SAVINGS, ";
        sql += "LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL, ";
        sql += "LEAN_BENEFIT_ACTUAL.OTHER_BENEFITS, ";
        sql += "LEAN_BENEFIT_ACTUAL.NUMBERR, ";
        sql += "LEAN_BENEFIT_ACTUAL.COMMENTS ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_BENEFIT_ACTUAL ON LEAN_PROJECTS.IDPROJECT = LEAN_BENEFIT_ACTUAL.IDPROJECT ";
        sql += "WHERE LEAN_BENEFIT_ACTUAL.YYEAR = :iYear ";
        sql += "AND (LEAN_BENEFIT_ACTUAL.CT_SAINGS IS NOT NULL OR LEAN_BENEFIT_ACTUAL.COST_SAVINGS IS NOT NULL ";
        sql += "OR LEAN_BENEFIT_ACTUAL.PRODUCTION_BARREL IS NOT NULL OR LEAN_BENEFIT_ACTUAL.NUMBERR IS NOT NULL) ORDER BY LEAN_PROJECTS.TITLE";

        return sql;
    }

    #endregion

    #region //===================== Insert Eliminate ==========================
    
    public static string getProjectEliminateByProjectId()
    {
        string sql = "SELECT IDELIMINATE, IDPROJECT, KAIZENID, PIP, PIP_V, HOLD_KAIZEN_EVENT, HOLD_KAIZEN_EVENT_V, ";
        sql += "SPONSOR_APPROVE_REC, SPONSOR_APPROVE_REC_V, IMPLEMENT, IMPLEMENT_V, ELIMINATE_WORK_DONE FROM LEAN_ELIMINATE WHERE IDPROJECT = :lProjectId";

        return sql;
    }

    public static string InsertEliminate()
    {
        string sql = "INSERT INTO LEAN_ELIMINATE (IDPROJECT, PIP_V, HOLD_KAIZEN_EVENT_V, SPONSOR_APPROVE_REC_V, IMPLEMENT_V) ";
        sql += "VALUES (:lProjectId, :sPIPV, :sHoldKaizenEventV, :sSponsorApproveRecV, :sImplementV) ";

        return sql;
    }

    public static string UpdateEliminate()
    {
        string sql = "UPDATE LEAN_ELIMINATE SET PIP_V = :sPIPV, HOLD_KAIZEN_EVENT_V = :sHoldKaizenEventV, ";
        sql += "SPONSOR_APPROVE_REC_V = :sSponsorApproveRecV, IMPLEMENT_V = :sImplementV  WHERE IDPROJECT = :lProjectId ";

        return sql;
    }

    public static string getEliminateWorkDoneByFunctionYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR, LEAN_ELIMINATE.IDELIMINATE, LEAN_ELIMINATE.IDPROJECT, LEAN_ELIMINATE.KAIZENID, ";
        sql += "LEAN_ELIMINATE.PIP, LEAN_ELIMINATE.PIP_V, LEAN_ELIMINATE.HOLD_KAIZEN_EVENT, LEAN_ELIMINATE.HOLD_KAIZEN_EVENT_V, LEAN_ELIMINATE.SPONSOR_APPROVE_REC, ";
        sql += "LEAN_ELIMINATE.SPONSOR_APPROVE_REC_V, LEAN_ELIMINATE.IMPLEMENT, LEAN_ELIMINATE.IMPLEMENT_V, LEAN_ELIMINATE.ELIMINATE_WORK_DONE ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_ELIMINATE ON LEAN_PROJECTS.IDPROJECT = LEAN_ELIMINATE.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.FUNCTIONID = :iFunctionId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string getEliminateWorkDoneByProjectYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR, LEAN_ELIMINATE.IDELIMINATE, LEAN_ELIMINATE.IDPROJECT, LEAN_ELIMINATE.KAIZENID, ";
        sql += "LEAN_ELIMINATE.PIP, LEAN_ELIMINATE.PIP_V, LEAN_ELIMINATE.HOLD_KAIZEN_EVENT, LEAN_ELIMINATE.HOLD_KAIZEN_EVENT_V, LEAN_ELIMINATE.SPONSOR_APPROVE_REC, ";
        sql += "LEAN_ELIMINATE.SPONSOR_APPROVE_REC_V, LEAN_ELIMINATE.IMPLEMENT, LEAN_ELIMINATE.IMPLEMENT_V, LEAN_ELIMINATE.ELIMINATE_WORK_DONE ";
        sql += "FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_ELIMINATE ON LEAN_PROJECTS.IDPROJECT = LEAN_ELIMINATE.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.IDPROJECT = :lProjectId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }
    #endregion 

    #region //===================== Insert Sustain ==========================

    public static string getProjectSustainByProjectId()
    {
        string sql = "SELECT IDSUSTAIN, IDPROJECT, SOPS, SOPS_V, VISUAL_MEASURES, VISUAL_MEASURES_V, ";
        sql += "HANDOVER, HANDOVER_V, SUSTAIN_WORKDONE FROM LEAN_SUSTAIN WHERE IDPROJECT = :lProjectId";

        return sql;
    }

    public static string InsertSustain()
    {
        string sql = "INSERT INTO LEAN_SUSTAIN (IDPROJECT, SOPS_V, VISUAL_MEASURES_V, HANDOVER_V) ";
        sql += "VALUES (:lProjectId, :sSPOP_V, :sVisual_MeasuresV, :sHandOverV) ";

        return sql;
    }

    public static string UpdateSustain()
    {
        string sql = "UPDATE LEAN_SUSTAIN SET SOPS_V = :sSPOP_V, VISUAL_MEASURES_V = :sVisual_MeasuresV, HANDOVER_V = :sHandOverV WHERE IDPROJECT = :lProjectId ";

        return sql;
    }

    public static string getSustainWorkDoneByFunctionYear()
    {
        string sql = "SELECT LEAN_SUSTAIN.SOPS_V, LEAN_SUSTAIN.VISUAL_MEASURES_V, LEAN_SUSTAIN.HANDOVER_V, LEAN_SUSTAIN.IDSUSTAIN, LEAN_SUSTAIN.IDPROJECT, ";
        sql += "LEAN_SUSTAIN.SOPS, LEAN_SUSTAIN.VISUAL_MEASURES, LEAN_SUSTAIN.HANDOVER, LEAN_SUSTAIN.SUSTAIN_WORKDONE, ";
        sql += "LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_SUSTAIN ON LEAN_PROJECTS.IDPROJECT = LEAN_SUSTAIN.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.FUNCTIONID = :iFunctionId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }

    public static string getSustainWorkDoneByProjectYear()
    {
        string sql = "SELECT LEAN_SUSTAIN.SOPS_V, LEAN_SUSTAIN.VISUAL_MEASURES_V, LEAN_SUSTAIN.HANDOVER_V, LEAN_SUSTAIN.IDSUSTAIN, LEAN_SUSTAIN.IDPROJECT, ";
        sql += "LEAN_SUSTAIN.SOPS, LEAN_SUSTAIN.VISUAL_MEASURES, LEAN_SUSTAIN.HANDOVER, LEAN_SUSTAIN.SUSTAIN_WORKDONE, ";
        sql += "LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.FUNCTIONID, LEAN_PROJECTS.YYEAR FROM LEAN_PROJECTS ";
        sql += "INNER JOIN LEAN_SUSTAIN ON LEAN_PROJECTS.IDPROJECT = LEAN_SUSTAIN.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.IDPROJECT = :lProjectId) AND (LEAN_PROJECTS.YYEAR = :iYear)";

        return sql;
    }
    #endregion 

    #region //================================= ASIS VSM Queries ===============================

    public static string getProjectVSMASISByProjectId()
    {
        //SELECT TIMEID, UNIT, DESCRIPTION, MINCONVERT FROM LEAN_TIME
        //string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_VSMASIS.IDVSMASIS, LEAN_VSMASIS.SEQID, LEAN_VSMASIS.ACTIVITYDESC, LEAN_VSMASIS.PROCESSLT, LEAN_VSMASIS.PROCESSLTUNIT, ";
        //sql += "LEAN_VSMASIS.PROCESSVAT, LEAN_VSMASIS.PROCESSVATUNIT, LEAN_VSMASIS.PLTMINUTE, LEAN_VSMASIS.PVATMINUTE, LEAN_VSMASIS.INPUT, LEAN_VSMASIS.OUTPUT, ";
        //sql += "LEAN_VSMASIS.IMPROVEMENT, LEAN_VSMASIS.WASTECODE, LEAN_VSMASIS.CUSTOMER, LEAN_VSMASIS.SUPPLIER, ";
        //sql += "LEAN_WASTECATEGORY.WASTEID, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_WASTECATEGORY.WASTE, LTUNIT.UNIT PLTUNIT, VATUNIT.UNIT VLTUNIT ";
        //sql += "FROM LEAN_VSMASIS ";
        //sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_VSMASIS.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        //sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_VSMASIS.IDPROJECT ";
        //sql += "INNER JOIN LEAN_TIME LTUNIT ON LEAN_VSMASIS.PROCESSLTUNIT = LTUNIT.TIMEID ";
        //sql += "INNER JOIN LEAN_TIME VATUNIT ON LEAN_VSMASIS.PROCESSVATUNIT = VATUNIT.TIMEID ";
        //sql += "INNER JOIN LEAN_WASTECATEGORY ON LEAN_VSMASIS.IDWASTECAT = LEAN_WASTECATEGORY.WASTEID WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId ORDER BY LEAN_VSMASIS.SEQID";

        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_VSMASIS.IDVSMASIS, LEAN_VSMASIS.SEQID, LEAN_VSMASIS.ACTIVITYDESC, LEAN_VSMASIS.PROCESSLT, LEAN_VSMASIS.PROCESSLTUNIT, ";
        sql += "LEAN_VSMASIS.PROCESSVAT, LEAN_VSMASIS.PROCESSVATUNIT, LEAN_VSMASIS.INPUT, LEAN_VSMASIS.OUTPUT, LTUNIT.MINCONVERT TIMEA, VATUNIT.MINCONVERT TIMEB, ";
        sql += "LEAN_VSMASIS.IMPROVEMENT, LEAN_VSMASIS.WASTECODE, LEAN_VSMASIS.CUSTOMER, LEAN_VSMASIS.SUPPLIER, ";
        sql += "LEAN_WASTECATEGORY.WASTEID, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_WASTECATEGORY.WASTE, LTUNIT.UNIT PLTUNIT, VATUNIT.UNIT VLTUNIT ";
        sql += "FROM LEAN_VSMASIS ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_VSMASIS.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_VSMASIS.IDPROJECT ";
        sql += "INNER JOIN LEAN_TIME LTUNIT ON LEAN_VSMASIS.PROCESSLTUNIT = LTUNIT.TIMEID ";
        sql += "INNER JOIN LEAN_TIME VATUNIT ON LEAN_VSMASIS.PROCESSVATUNIT = VATUNIT.TIMEID ";
        sql += "INNER JOIN LEAN_WASTECATEGORY ON LEAN_VSMASIS.IDWASTECAT = LEAN_WASTECATEGORY.WASTEID WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId ORDER BY LEAN_VSMASIS.SEQID";

        return sql;
    }

    public static string getVSMASISByVsmAsIsId()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_VSMASIS.IDVSMASIS, LEAN_VSMASIS.SEQID, LEAN_VSMASIS.ACTIVITYDESC, LEAN_VSMASIS.PROCESSLT, LEAN_VSMASIS.PROCESSLTUNIT, ";
        sql += "LEAN_VSMASIS.PROCESSVAT, LEAN_VSMASIS.PROCESSVATUNIT, LEAN_VSMASIS.PLTMINUTE, LEAN_VSMASIS.PVATMINUTE, LEAN_VSMASIS.INPUT, LEAN_VSMASIS.OUTPUT, ";
        sql += "LEAN_VSMASIS.IMPROVEMENT, LEAN_VSMASIS.WASTECODE, LEAN_VSMASIS.CUSTOMER, LEAN_VSMASIS.SUPPLIER, ";
        sql += "LEAN_WASTECATEGORY.WASTEID, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_WASTECATEGORY.WASTE ";
        sql += "FROM LEAN_VSMASIS ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_VSMASIS.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_VSMASIS.IDPROJECT ";
        sql += "INNER JOIN LEAN_WASTECATEGORY ON LEAN_VSMASIS.IDWASTECAT = LEAN_WASTECATEGORY.WASTEID WHERE LEAN_VSMASIS.IDVSMASIS = :lVsmAsIsId";

        return sql;
    }

    public static string InsertVsmAsIs()
    {
        //string sql = "INSERT INTO LEAN_VSMASIS (IDPROJECT, SEQID, ACTIVITYDESC, PROCESSLT, PROCESSLTUNIT, PROCESSVAT, PROCESSVATUNIT, PLTMINUTE, PVATMINUTE, ";
        //sql += "IDWASTECAT, SUPPLIER, INPUT, OUTPUT, CUSTOMER, IMPROVEMENT, WASTECODE, FUNCTIONID) VALUES (:lProjectId, :iSeqId, :sActivityDesc, :sProcessLt, ";
        //sql += ":iProcessLtUnit, :sProcessVat, :iProcessVatUnit, :sProcessLtMin, :sProcessVatMin, :iWasteCat, :sSupplier, :sInput, :sOutput, :sCustomer, :sImprovement, :sWasteCode, :iFunctionId)";

        string sql = "INSERT INTO LEAN_VSMASIS (IDPROJECT, SEQID, ACTIVITYDESC, PROCESSLT, PROCESSLTUNIT, PROCESSVAT, PROCESSVATUNIT, IDWASTECAT, ";
        sql += "SUPPLIER, INPUT, OUTPUT, CUSTOMER, IMPROVEMENT, WASTECODE, FUNCTIONID) VALUES (:lProjectId, :iSeqId, :sActivityDesc, :sProcessLt, ";
        sql += ":iProcessLtUnit, :sProcessVat, :iProcessVatUnit, :iWasteCat, :sSupplier, :sInput, :sOutput, :sCustomer, :sImprovement, :sWasteCode, :iFunctionId)";

        
        return sql;
    }

    public static string UpdateVsmAsIs()
    {
        //string sql = "UPDATE LEAN_VSMASIS SET SEQID = :iSeqId, ACTIVITYDESC = :sActivityDesc, PROCESSLT = :sProcessLt, PROCESSLTUNIT = :iProcessLTUnit, ";
        //sql += "PROCESSVAT = :sProcessVat, PROCESSVATUNIT = :iProcessVatUnit, PLTMINUTE = :sProcessLtMin, PVATMINUTE = :sProcessVatMin, IDWASTECAT = :iWasteCat, ";
        //sql += "SUPPLIER = :sSupplier, INPUT = :sInput, OUTPUT = :sOutput, CUSTOMER = :sCustomer, IMPROVEMENT = :sImprovement, WASTECODE = :sWasteCode, ";
        //sql += "FUNCTIONID = :iFunctionId WHERE IDVSMASIS = :lVsmAsIsId";

        string sql = "UPDATE LEAN_VSMASIS SET SEQID = :iSeqId, ACTIVITYDESC = :sActivityDesc, PROCESSLT = :sProcessLt, PROCESSLTUNIT = :iProcessLTUnit, ";
        sql += "PROCESSVAT = :sProcessVat, PROCESSVATUNIT = :iProcessVatUnit, IDWASTECAT = :iWasteCat, SUPPLIER = :sSupplier, INPUT = :sInput, ";
        sql += "OUTPUT = :sOutput, CUSTOMER = :sCustomer, IMPROVEMENT = :sImprovement, WASTECODE = :sWasteCode, FUNCTIONID = :iFunctionId ";
        sql += "WHERE IDVSMASIS = :lVsmAsIsId";

        return sql;
    }

    public static string DeleteVsmAsIs2()
    {
        string sql = "DELETE FROM LEAN_VSMASIS WHERE IDVSMASIS = :lVsmAsIsId";

        return sql;
    }

    #endregion

    #region //================= Look Up Tables Queries =================

    public static string getLeanTime()
    {
        string sql = "SELECT TIMEID, UNIT, DESCRIPTION, MINCONVERT FROM LEAN_TIME";
        return sql;
    }

    public static string getLeanTeam()
    {
        string sql = "SELECT TEAMID, TEAM FROM LEAN_TEAM";
        return sql;
    }

    public static string getLeanTeamById()
    {
        string sql = "SELECT TEAMID, TEAM FROM LEAN_TEAM WHERE TEAMID = :iTeamId";
        return sql;
    }

    public static string getWasteCategory()
    {
        string sql = "SELECT WASTEID, WASTE, CODE FROM LEAN_WASTECATEGORY";
        return sql;
    }

    public static string getSuppliers()
    {
        string sql = "SELECT SUPPLIERID, SUPPLIER FROM LEAN_SUPPLIERS";
        return sql;
    }

    public static string getCustomers()
    {
        string sql = "SELECT CUSTOMERID, CUSTOMER FROM LEAN_CUSTOMER";
        return sql;
    }

    public static string getProjectTypes()
    {
        string sql = "SELECT IDTYPE, PROJTYPE FROM LEAN_PROJTYPE";
        return sql;
    }

    public static string getProjectTypeById()
    {
        string sql = "SELECT IDTYPE, PROJTYPE FROM LEAN_PROJTYPE WHERE IDTYPE = :TypeId";
        return sql;
    }

    #endregion

    #region //======================= Dash Board Queries ==================================

    public static string getDashBoardData()
    {
        //string sql = "SELECT IDPROJECT, PROJECTCODE, TITLE, YYEAR, IDTYPE, PROJTYPE, IDDEPARTMENT, DEPARTMENT, FUNCTIONID, FUNCTION, ";
        //sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, COMMENTS, USERID, FULLNAME, ROLEID, EMAIL,  ";
        //sql += "CHAMPIONUSERID, CHAMPIONFULLNAME, CHAMPIONEMAIL, CHAMPIONROLEID, MANAGERUSERID, MANAGERFULLNAME, MANAGEREMAIL, MANAGERROLEID, ";
        //sql += "FOCALPOINTUSERID, FOCALPOINTFULLNAME, FOCALPOINTEMAIL, FOCALPOINTROLEID, ";
        //sql += "IDELIMINATE, KAIZENID, PIP, PIP_V, HOLD_KAIZEN_EVENT, HOLD_KAIZEN_EVENT_V, SPONSOR_APPROVE_REC, SPONSOR_APPROVE_REC_V, IMPLEMENT, IMPLEMENT_V, ELIMINATE_WORK_DONE, ";
        //sql += "IDSUSTAIN, SOPS, SOPS_V, VISUAL_MEASURES, VISUAL_MEASURES_V, HANDOVER, HANDOVER_V, SUSTAIN_WORKDONE, ";
        //sql += "IDIDENTIFY, VSMID, KICKOFF_MEET, KICK_OFF_MEET_V, SIGNOFF_CHARTERS, SIGNOFF_CHARTER_V, PROCESS_WALK, PROCESS_WALK_V, VSM, VSM_V, IDENTIFY_WORKDONE ";
        //sql += "FROM VIW_LEAN_DASHBOARD ORDER BY TITLE";

        string sql = getDashBoardDataViewData();
        sql += " ORDER BY TITLE";

        return sql;
    }

    public static string getDashBoardDataByYear()
    {
        //string sql = "SELECT IDPROJECT, PROJECTCODE, TITLE, YYEAR, IDTYPE, PROJTYPE, IDDEPARTMENT, DEPARTMENT, FUNCTIONID, FUNCTION, ";
        //sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, COMMENTS, USERID, FULLNAME, ROLEID, EMAIL,  ";
        //sql += "CHAMPIONUSERID, CHAMPIONFULLNAME, CHAMPIONEMAIL, CHAMPIONROLEID, MANAGERUSERID, MANAGERFULLNAME, MANAGEREMAIL, MANAGERROLEID, ";
        //sql += " FOCALPOINTUSERID, FOCALPOINTFULLNAME, FOCALPOINTEMAIL, FOCALPOINTROLEID, ";
        //sql += "IDELIMINATE, KAIZENID, PIP, PIP_V, HOLD_KAIZEN_EVENT, HOLD_KAIZEN_EVENT_V, SPONSOR_APPROVE_REC, SPONSOR_APPROVE_REC_V, IMPLEMENT, IMPLEMENT_V, ELIMINATE_WORK_DONE, ";
        //sql += "IDSUSTAIN, SOPS, SOPS_V, VISUAL_MEASURES, VISUAL_MEASURES_V, HANDOVER, HANDOVER_V, SUSTAIN_WORKDONE, ";
        //sql += "IDIDENTIFY, VSMID, KICKOFF_MEET, KICK_OFF_MEET_V, SIGNOFF_CHARTERS, SIGNOFF_CHARTER_V, PROCESS_WALK, PROCESS_WALK_V, VSM, VSM_V, IDENTIFY_WORKDONE ";
        //sql += "FROM VIW_LEAN_DASHBOARD WHERE YYEAR = :iYear ORDER BY TITLE";

        string sql = getDashBoardDataViewData();
        sql += " WHERE YYEAR = :iYear ORDER BY TITLE";

        return sql;
    }

    public static string getDashBoardDataByFunction()
    {
        //string sql = "SELECT IDPROJECT, PROJECTCODE, TITLE, YYEAR, IDTYPE, PROJTYPE, IDDEPARTMENT, DEPARTMENT, FUNCTIONID, FUNCTION, ";
        //sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, COMMENTS, USERID, FULLNAME, ROLEID, EMAIL,  ";
        //sql += "CHAMPIONUSERID, CHAMPIONFULLNAME, CHAMPIONEMAIL, CHAMPIONROLEID, MANAGERUSERID, MANAGERFULLNAME, MANAGEREMAIL, MANAGERROLEID, ";
        //sql += "FOCALPOINTUSERID, FOCALPOINTFULLNAME, FOCALPOINTEMAIL, FOCALPOINTROLEID, ";
        //sql += "IDELIMINATE, KAIZENID, PIP, PIP_V, HOLD_KAIZEN_EVENT, HOLD_KAIZEN_EVENT_V, SPONSOR_APPROVE_REC, SPONSOR_APPROVE_REC_V, IMPLEMENT, IMPLEMENT_V, ELIMINATE_WORK_DONE, ";
        //sql += "IDSUSTAIN, SOPS, SOPS_V, VISUAL_MEASURES, VISUAL_MEASURES_V, HANDOVER, HANDOVER_V, SUSTAIN_WORKDONE, ";
        //sql += "IDIDENTIFY, VSMID, KICKOFF_MEET, KICK_OFF_MEET_V, SIGNOFF_CHARTERS, SIGNOFF_CHARTER_V, PROCESS_WALK, PROCESS_WALK_V, VSM, VSM_V, IDENTIFY_WORKDONE ";
        //sql += "FROM VIW_LEAN_DASHBOARD WHERE FUNCTIONID = :iFunctionId ORDER BY TITLE";

        string sql = getDashBoardDataViewData();
        sql += " WHERE CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId ORDER BY TITLE";

        return sql;
    }

    public static string getDashBoardDataByYearFunction()
    {
        //string sql = "SELECT IDPROJECT, PROJECTCODE, TITLE, YYEAR, IDTYPE, PROJTYPE, IDDEPARTMENT, DEPARTMENT, FUNCTIONID, FUNCTION, ";
        //sql += "OPPORTUNITY, BUZCASE, GOALS, INSCOPE, OUTSCOPE, COMMENTS, USERID, FULLNAME, ROLEID, EMAIL,  ";
        //sql += "CHAMPIONUSERID, CHAMPIONFULLNAME, CHAMPIONEMAIL, CHAMPIONROLEID, MANAGERUSERID, MANAGERFULLNAME, MANAGEREMAIL, MANAGERROLEID, ";
        //sql += "FOCALPOINTUSERID, FOCALPOINTFULLNAME, FOCALPOINTEMAIL, FOCALPOINTROLEID, ";
        //sql += "IDELIMINATE, KAIZENID, PIP, PIP_V, HOLD_KAIZEN_EVENT, HOLD_KAIZEN_EVENT_V, SPONSOR_APPROVE_REC, SPONSOR_APPROVE_REC_V, IMPLEMENT, IMPLEMENT_V, ELIMINATE_WORK_DONE, ";
        //sql += "IDSUSTAIN, SOPS, SOPS_V, VISUAL_MEASURES, VISUAL_MEASURES_V, HANDOVER, HANDOVER_V, SUSTAIN_WORKDONE, ";
        //sql += "IDIDENTIFY, VSMID, KICKOFF_MEET, KICK_OFF_MEET_V, SIGNOFF_CHARTERS, SIGNOFF_CHARTER_V, PROCESS_WALK, PROCESS_WALK_V, VSM, VSM_V, IDENTIFY_WORKDONE ";
        //sql += "FROM VIW_LEAN_DASHBOARD WHERE YYEAR = :iYear AND FUNCTIONID = :iFunctionId ORDER BY TITLE";

        string sql = getDashBoardDataViewData();
        sql += " WHERE YYEAR = :iYear AND CPDMS_FUNCTIONS.FUNCTIONID = :iFunctionId ORDER BY TITLE";

        return sql;
    }

    public static string getDashBoardDataViewData()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.PROJECTCODE, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_PROJTYPE.IDTYPE, LEAN_PROJTYPE.PROJTYPE, ";
        sql += "COMMON_DEPARTMENT.IDDEPARTMENT, COMMON_DEPARTMENT.DEPARTMENT, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, ";
        sql += "SPONSOR.USERID, SPONSOR.FULLNAME, SPONSOR.ROLEID, SPONSOR.EMAIL, ";

        sql += "CHAMPION.USERID     AS CHAMPIONUSERID, ";
        sql += "CHAMPION.FULLNAME   AS CHAMPIONFULLNAME, ";
        sql += "CHAMPION.EMAIL      AS CHAMPIONEMAIL, ";
        sql += "CHAMPION.ROLEID     AS CHAMPIONROLEID, ";

        sql += "MANAGER.USERID      AS MANAGERUSERID, ";
        sql += "MANAGER.FULLNAME    AS MANAGERFULLNAME, ";
        sql += "MANAGER.EMAIL       AS MANAGEREMAIL, ";
        sql += "MANAGER.ROLEID      AS MANAGERROLEID, ";

        //sql += "COACH.USERID        AS COACHUSERID, ";
        //sql += "COACH.FULLNAME      AS COACHFULLNAME, ";
        //sql += "COACH.ROLEID        AS COACHROLEID, ";
        //sql += "COACH.EMAIL         AS COACHEMAIL, ";

        sql += "FOCALPOINT.USERID   AS FOCALPOINTUSERID, ";
        sql += "FOCALPOINT.FULLNAME AS FOCALPOINTFULLNAME, ";
        sql += "FOCALPOINT.EMAIL    AS FOCALPOINTEMAIL, ";
        sql += "FOCALPOINT.ROLEID   AS FOCALPOINTROLEID, ";

        sql += "LEAN_ELIMINATE.IDELIMINATE, ";
        sql += "LEAN_ELIMINATE.KAIZENID, ";
        sql += "LEAN_ELIMINATE.PIP, ";
        sql += "LEAN_ELIMINATE.PIP_V, ";
        sql += "LEAN_ELIMINATE.HOLD_KAIZEN_EVENT, ";
        sql += "LEAN_ELIMINATE.HOLD_KAIZEN_EVENT_V, ";
        sql += "LEAN_ELIMINATE.SPONSOR_APPROVE_REC, ";
        sql += "LEAN_ELIMINATE.SPONSOR_APPROVE_REC_V, ";
        sql += "LEAN_ELIMINATE.IMPLEMENT, ";
        sql += "LEAN_ELIMINATE.IMPLEMENT_V, ";
        sql += "LEAN_ELIMINATE.ELIMINATE_WORK_DONE, ";

        sql += "LEAN_SUSTAIN.IDSUSTAIN, ";
        sql += "LEAN_SUSTAIN.SOPS, ";
        sql += "LEAN_SUSTAIN.SOPS_V, ";
        sql += "LEAN_SUSTAIN.VISUAL_MEASURES, ";
        sql += "LEAN_SUSTAIN.VISUAL_MEASURES_V, ";
        sql += "LEAN_SUSTAIN.HANDOVER, ";
        sql += "LEAN_SUSTAIN.HANDOVER_V, ";
        sql += "LEAN_SUSTAIN.SUSTAIN_WORKDONE, ";

        sql += "LEAN_IDENTIFY.IDIDENTIFY, ";
        sql += "LEAN_IDENTIFY.VSMID, ";
        sql += "LEAN_IDENTIFY.KICKOFF_MEET, ";
        sql += "LEAN_IDENTIFY.KICK_OFF_MEET_V, ";
        sql += "LEAN_IDENTIFY.SIGNOFF_CHARTERS, ";
        sql += "LEAN_IDENTIFY.SIGNOFF_CHARTER_V, ";
        sql += "LEAN_IDENTIFY.PROCESS_WALK, ";
        sql += "LEAN_IDENTIFY.PROCESS_WALK_V, ";
        sql += "LEAN_IDENTIFY.VSM, ";
        sql += "LEAN_IDENTIFY.VSM_V, ";
        sql += "LEAN_IDENTIFY.IDENTIFY_WORKDONE ";

        sql += "FROM LEAN_PROJECTS ";
        sql += "LEFT OUTER JOIN LEAN_IDENTIFY ON LEAN_PROJECTS.IDPROJECT = LEAN_IDENTIFY.IDPROJECT ";
        sql += "LEFT OUTER JOIN LEAN_ELIMINATE ON LEAN_PROJECTS.IDPROJECT = LEAN_ELIMINATE.IDPROJECT ";
        sql += "LEFT OUTER JOIN LEAN_SUSTAIN ON LEAN_PROJECTS.IDPROJECT = LEAN_SUSTAIN.IDPROJECT ";
        sql += "INNER JOIN PROD_USERMGT SPONSOR ON SPONSOR.USERID = LEAN_PROJECTS.SPONSORID ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON CPDMS_FUNCTIONS.FUNCTIONID = LEAN_PROJECTS.FUNCTIONID ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON COMMON_DEPARTMENT.IDDEPARTMENT = LEAN_PROJECTS.IDDEPARTMENT ";
        sql += "INNER JOIN LEAN_PROJTYPE ON LEAN_PROJTYPE.IDTYPE = LEAN_PROJECTS.IDTYPE ";
        sql += "INNER JOIN PROD_USERMGT CHAMPION ON CHAMPION.USERID = LEAN_PROJECTS.CHAMPIONID ";
        sql += "INNER JOIN PROD_USERMGT MANAGER ON MANAGER.USERID = LEAN_PROJECTS.MANAGERID ";
        //sql += "INNER JOIN PROD_USERMGT COACH ON COACH.USERID = LEAN_PROJECTS.COACHID ";
        sql += "INNER JOIN PROD_USERMGT FOCALPOINT ON FOCALPOINT.USERID = LEAN_PROJECTS.FOCALPOINTID ";

        return sql;
    }

    public static string getProjectAssessmentYear()
    {
        string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_ASSESSMENT_CUSTOMERS.IDASSCUSTOMER, LEAN_ASSESSMENT_CUSTOMERS.KEYCUSTOMERS, ";
        sql += "LEAN_ASSESSMENT_CUSTOMERS.REVIEWERS, TO_CHAR(LEAN_ASSESSMENT_CUSTOMERS.DATE_ASSESSED, 'DD/MM/YYYY') AS DATE_ASSESSED, LEAN_ASSESSMENT_CUSTOMERS.POSITIVEFINDINGS, ";
        sql += "LEAN_ASSESSMENT_CUSTOMERS.NEGATIVEFINDINGS FROM LEAN_PROJECTS INNER JOIN LEAN_ASSESSMENT_CUSTOMERS ON LEAN_PROJECTS.IDPROJECT = LEAN_ASSESSMENT_CUSTOMERS.IDPROJECT ";
        sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear)";

        //string sql = "SELECT LEAN_PROJECTS.IDPROJECT, LEAN_PROJECTS.TITLE, LEAN_PROJECTS.YYEAR, LEAN_ASSESSMENT_CUSTOMERS.IDASSCUSTOMER, LEAN_ASSESSMENT_CUSTOMERS.KEYCUSTOMERS, ";
        //sql += "LEAN_ASSESSMENT_CUSTOMERS.REVIEWERS, TO_CHAR(LEAN_ASSESSMENT_CUSTOMERS.DATE_ASSESSED, 'DD/MM/YYYY') AS DATE_ASSESSED, LEAN_ASSESSMENT_CUSTOMERS.POSITIVEFINDINGS, ";
        //sql += "LEAN_ASSESSMENT_CUSTOMERS.NEGATIVEFINDINGS, LEAN_SUSTAIN.SOPS_V, LEAN_SUSTAIN.VISUAL_MEASURES_V, LEAN_SUSTAIN.HANDOVER_V FROM LEAN_PROJECTS ";
        //sql += "LEFT OUTER JOIN LEAN_ASSESSMENT_CUSTOMERS ON LEAN_PROJECTS.IDPROJECT = LEAN_ASSESSMENT_CUSTOMERS.IDPROJECT ";
        //sql += "INNER JOIN LEAN_SUSTAIN ON LEAN_SUSTAIN.IDPROJECT = LEAN_PROJECTS.IDPROJECT ";
        //sql += "WHERE (LEAN_PROJECTS.YYEAR = :iYear) AND (LEAN_SUSTAIN.SOPS_V <> 0) AND (LEAN_SUSTAIN.VISUAL_MEASURES_V <> 0) AND (LEAN_SUSTAIN.HANDOVER_V <> 0)";

        return sql;
    }


    #endregion

    #region //====================== Project Recommendations Queries ==============================

    private static string MasterGetProjectRecommendationsByProjectId()
    {
        string sql = "SELECT LEAN_PROJECT_IMPR_REC.RECOMMENDATIONID, LEAN_PROJECTS.IDPROJECT, LEAN_PROJECT_IMPR_REC.SEQID, LEAN_PROJECT_IMPR_REC.RECOMMENDATION, ";
        sql += "TO_CHAR(LEAN_PROJECT_IMPR_REC.TARGETDATE, 'DD/MM/YYYY') AS TARGETDATE, LEAN_PROJECT_IMPR_REC.SPONSOR_COMMENT, LEAN_PROJECT_IMPR_REC.CHAMPION_COMMENT, ";
        sql += "LEAN_PROJECT_IMPR_REC.STATUS, CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, LEAN_PROJECT_IMPR_REC.CTREDUCTION, LEAN_PROJECT_IMPR_REC.COSTREDUCTION, ";
        sql += "LEAN_PROJECT_IMPR_REC.PRODUCTIONBARREL, LEAN_PROJECT_IMPR_REC.NUMBERRS, LEAN_PROJECT_IMPR_REC.OTHERBENEFITS, LEAN_PROJECT_IMPR_REC.COMMENTS, ";
        sql += "ACTIONPARTY.FUNCTIONID AS ACTIONPARTYFUNCTIONID, ACTIONPARTY.FUNCTION AS ACTIONPARTYFUNCTION, ACTIONFUNTION.FUNCTIONID AS ACTIONFUNTIONFUNCTIONID, ";
        sql += "ACTIONFUNTION.FUNCTION AS ACTIONFUNTIONFUNCTION FROM LEAN_PROJECT_IMPR_REC ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_PROJECT_IMPR_REC.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        sql += "LEFT OUTER JOIN CPDMS_FUNCTIONS ACTIONPARTY ON LEAN_PROJECT_IMPR_REC.ACTIONPARTY = ACTIONPARTY.FUNCTIONID ";
        sql += "LEFT OUTER JOIN CPDMS_FUNCTIONS ACTIONFUNTION ON LEAN_PROJECT_IMPR_REC.ACTIONFUNCTION = ACTIONFUNTION.FUNCTIONID ";
        sql += "INNER JOIN LEAN_PROJECTS ON LEAN_PROJECTS.IDPROJECT = LEAN_PROJECT_IMPR_REC.IDPROJECT ";

        return sql;
    }

    public static string getProjectRecommendationsByProjectId()
    {
        string sql = MasterGetProjectRecommendationsByProjectId();
        sql += "WHERE LEAN_PROJECTS.IDPROJECT = :lProjectId ORDER BY LEAN_PROJECT_IMPR_REC.SEQID";
        
        return sql;
    }

    public static string getProjectRecommendationById()
    {
        string sql = MasterGetProjectRecommendationsByProjectId();
        sql += "WHERE LEAN_PROJECT_IMPR_REC.RECOMMENDATIONID = :lRecommendationId";

        return sql;
    }

    public static string InsertRecommendation()
    {
        string sql = "INSERT INTO LEAN_PROJECT_IMPR_REC (IDPROJECT, ACTIONPARTY, SEQID, RECOMMENDATION, TARGETDATE, SPONSOR_COMMENT, ";
        sql += "CHAMPION_COMMENT, STATUS, FUNCTIONID, CTREDUCTION, COSTREDUCTION, PRODUCTIONBARREL, NUMBERRS, OTHERBENEFITS, COMMENTS, ACTIONFUNCTION) ";
        sql += "VALUES (:lProjectId, :iActionParty, :iSeqId, :sRecommendations, :sTargetDate, :sSponsorComment, :sChampionComment, ";
        sql += ":iStatus, :iFunctionId, :sCTReduction, :sCostReduction, :sProductionBarrel, :sNumber, :sOtherBenefits, :sComments, :iActionFunction) ";

        return sql;
    }

    public static string UpdateRecommendation()
    {
        string sql = "UPDATE LEAN_PROJECT_IMPR_REC SET ACTIONPARTY = :iActionParty, RECOMMENDATION = :sRecommendations, ";
        sql += "TARGETDATE = :sTargetDate, SPONSOR_COMMENT = :sSponsorComment, CHAMPION_COMMENT = :sChampionComment, STATUS = :iStatus, ";
        sql += "FUNCTIONID = :iFunctionId, CTREDUCTION = :sCTReduction, COSTREDUCTION = :sCostReduction, PRODUCTIONBARREL = :sProductionBarrel, ";
        sql += "NUMBERRS = :sNumber, OTHERBENEFITS = :sOtherBenefits, COMMENTS = :sComments, ACTIONFUNCTION = :iActionFunction WHERE RECOMMENDATIONID = :lRecommendationId";

        return sql;
    }

    public static string DeleteRecommendation()
    {
        string sql = "DELETE FROM LEAN_PROJECT_IMPR_REC WHERE RECOMMENDATIONID = :lRecommendationId";

        return sql;
    }

    public static string InsertProjectBenefitActual()
    {
        string sql = "INSERT INTO LEAN_BENEFIT_ACTUAL (IDPROJECT, YYEAR, CT_SAINGS, COST_SAVINGS, PRODUCTION_BARREL, OTHER_BENEFITS, COMMENTS, NUMBERR) ";
        sql += "VALUES (:lProjectId, :iYear, :sCTSavings, :sCostSavings, :sProductionBarrel, :sOtherBenefits, :sComments, :sNumber) ";
        
        return sql;
    }

    public static string UpdateProjectBenefitActual()
    {
        string sql = "UPDATE LEAN_BENEFIT_ACTUAL SET YYEAR = :iYear, CT_SAINGS = :sCTSavings, COST_SAVINGS = :sCostSavings, ";
        sql += "PRODUCTION_BARREL = :sProductionBarrel, OTHER_BENEFITS = :sOtherBenefits, COMMENTS = :sComments, NUMBERR = :sNumber WHERE IDPROJECT = :lProjectId";
        
        return sql;
    }

    public static string DeleteProjectBenefitActual()
    {
        string sql = "DELETE FROM LEAN_BENEFIT_ACTUAL WHERE ACTUALID = :lActualId";
        return sql;
    }

    
    #endregion

    #region //================ Project Team Members ===================================

    public static string getProjectTeamMembers()
    {
        string sql = "SELECT LEAN_PROJECT_TEAM.IDTEAM, LEAN_PROJECT_TEAM.IDPROJECT, PROD_USERMGT.USERID AS IDUSERS, PROD_USERMGT.FULLNAME, ";
        sql += "PROD_USERMGT.EMAIL, PROD_USERMGT.USERNAME, PROD_USERMGT.REFIND, PROD_USERMGT.ROLEID, ";
        sql += "PROD_USERMGT.STATUS, PROD_USERMGT.PASSWORD, PROD_USERMGT.DELIGATED FROM LEAN_PROJECT_TEAM ";
        sql += "INNER JOIN PROD_USERMGT ON PROD_USERMGT.USERID = LEAN_PROJECT_TEAM.IDUSERS WHERE LEAN_PROJECT_TEAM.IDPROJECT = :lProjectId";

        return sql;
    }
    public static string deleteProjectTeamMember()
    {
        string sql = "DELETE FROM LEAN_PROJECT_TEAM WHERE IDTEAM = :lTeamId";
        return sql;
    }
    public static string AddProjectTeamMember()
    {
        string sql = "INSERT INTO LEAN_PROJECT_TEAM (IDPROJECT, IDUSERS) VALUES (:lProjectId, :iUserId)";
        return sql;
    }

    

    #endregion


    #region //================ Project DRB Members ===================================

    public static string getProjectDrbMembers()
    {
        string sql = "SELECT LEAN_PROJECT_DRB.IDDRB, LEAN_PROJECT_DRB.IDPROJECT, PROD_USERMGT.USERID, PROD_USERMGT.FULLNAME, ";
        sql += "PROD_USERMGT.EMAIL, PROD_USERMGT.USERNAME, PROD_USERMGT.REFIND, PROD_USERMGT.ROLEID, ";
        sql += "PROD_USERMGT.STATUS, PROD_USERMGT.PASSWORD, PROD_USERMGT.DELIGATED FROM LEAN_PROJECT_DRB ";
        sql += "INNER JOIN PROD_USERMGT ON PROD_USERMGT.USERID = LEAN_PROJECT_DRB.USERID WHERE LEAN_PROJECT_DRB.IDPROJECT = :lProjectId";

        return sql;
    }
    public static string deleteProjectDrbMember()
    {
        string sql = "DELETE FROM LEAN_PROJECT_DRB WHERE IDDRB = :lDrbId";
        return sql;
    }

    public static string AddProjectDrbMember()
    {
        string sql = "INSERT INTO LEAN_PROJECT_DRB (IDPROJECT, USERID) VALUES (:lProjectId, :iUserId)";
        return sql;
    }

    #endregion

    #region //================ Project Coaches ===================================

    public static string getProjectCoach()
    {
        string sql = "SELECT LEAN_COACH.IDCOACH, LEAN_COACH.IDPROJECT, PROD_USERMGT.USERID, PROD_USERMGT.FULLNAME, ";
        sql += "PROD_USERMGT.EMAIL, PROD_USERMGT.USERNAME, PROD_USERMGT.REFIND, PROD_USERMGT.ROLEID, ";
        sql += "PROD_USERMGT.STATUS, PROD_USERMGT.PASSWORD, PROD_USERMGT.DELIGATED FROM LEAN_COACH ";
        sql += "INNER JOIN PROD_USERMGT ON PROD_USERMGT.USERID = LEAN_COACH.USERID WHERE LEAN_COACH.IDPROJECT = :lProjectId";

        return sql;
    }
    public static string deleteProjectCoach()
    {
        string sql = "DELETE FROM LEAN_COACH WHERE IDCOACH = :lCoachId";
        return sql;
    }

    public static string AddProjectCoach()
    {
        string sql = "INSERT INTO LEAN_COACH (IDPROJECT, USERID) VALUES (:lProjectId, :iUserId)";
        return sql;
    }

    #endregion


    #region //================ Training ===================================
    
    public static string AddPersonTrained()
    {
        string sql = "INSERT INTO LEAN_TRAINING (USERID, IDDEPARTMENT, FUNCTIONID, IDTRAINTYPE, YYEAR, TRAINERS) VALUES (:iUserId, :iDept, :iFunction, :iTrainingType, :iYear, :sTrainers)";
        return sql;
    }

    public static string UpdatePersonTrained()
    {
        string sql = "UPDATE LEAN_TRAINING SET USERID = :iUserId, IDDEPARTMENT = :iDept, FUNCTIONID = :iFunction, IDTRAINTYPE = :iTrainingType, YYEAR = :iYear, TRAINERS = :sTrainers WHERE IDTRAINING = :lTrainingId";
        return sql;
    }

    public static string getPersonsTrainedByYear()
    {
        //string sql = "SELECT IDTRAINING, USERID, IDDEPARTMENT, FUNCTIONID, IDTRAINTYPE, YYEAR, TRAINERS FROM LEAN_TRAINING WHERE LEAN_TRAINING.YYEAR = :iYear";

        string sql = "SELECT LEAN_TRAINING.IDTRAINING, LEAN_TRAINING.YYEAR, LEAN_TRAINING.TRAINERS, LEAN_TRAINING_TYPE.IDTYPE, ";
        sql += "LEAN_TRAINING.IDTRAINTYPE, LEAN_TRAINING_TYPE.TYPE, COMMON_DEPARTMENT.DEPARTMENT, COMMON_DEPARTMENT.IDDEPARTMENT, ";
        sql += "CPDMS_FUNCTIONS.FUNCTIONID, CPDMS_FUNCTIONS.FUNCTION, PROD_USERMGT.USERID, PROD_USERMGT.FULLNAME FROM LEAN_TRAINING ";
        sql += "INNER JOIN LEAN_TRAINING_TYPE ON LEAN_TRAINING.IDTRAINTYPE = LEAN_TRAINING_TYPE.IDTYPE ";
        sql += "INNER JOIN COMMON_DEPARTMENT ON LEAN_TRAINING.IDDEPARTMENT = COMMON_DEPARTMENT.IDDEPARTMENT ";
        sql += "INNER JOIN CPDMS_FUNCTIONS ON LEAN_TRAINING.FUNCTIONID = CPDMS_FUNCTIONS.FUNCTIONID ";
        sql += "INNER JOIN PROD_USERMGT ON LEAN_TRAINING.USERID = PROD_USERMGT.USERID WHERE LEAN_TRAINING.YYEAR = :iYear ORDER BY PROD_USERMGT.FULLNAME";

        return sql;
    }

    public static string getPersonsTrainedById()
    {
        string sql = "SELECT IDTRAINING, USERID, IDDEPARTMENT, FUNCTIONID, IDTRAINTYPE, YYEAR, TRAINERS FROM LEAN_TRAINING WHERE IDTRAINING = :lTrainingId";
        return sql;
    }

    public static string getPersonsTrainedByTrainingTypeIdYear()
    {
        string sql = "SELECT COUNT(IDTRAINING) AS TRAINED FROM LEAN_TRAINING WHERE IDTRAINTYPE = :iTrainTypeId AND YYEAR = :iYear";
        return sql;
    }

    public static string DeletePersonsTrainedById()
    {
        string sql = "DELETE FROM LEAN_TRAINING WHERE IDTRAINING = :lTrainingId";
        return sql;
    }

    public static string getTrainingType()
    {
        string sql = "SELECT IDTYPE, TYPE FROM LEAN_TRAINING_TYPE";
        return sql;
    }


    #endregion

    #region dtGetCategories

    public static string getCategories()
    {
        string sql = "SELECT IDCATEGORY, IDCATEGORY ||'. '|| CATEGORY AS CATEGORY FROM LEAN_CATEGORY ORDER BY IDCATEGORY";
        return sql;
    }

    public static string getQuestionsByCategoryId()
    {
        string sql = "SELECT LEAN_CATEGORY.IDCATEGORY, LEAN_CATEGORY.CATEGORY, LEAN_SUSTAINABILITY.IDSUSTAIN, LEAN_SUSTAINABILITY.XQUESTIONS ";
        sql += "FROM LEAN_SUSTAINABILITY INNER JOIN LEAN_CATEGORY ON LEAN_CATEGORY.IDCATEGORY = LEAN_SUSTAINABILITY.IDCATEGORY WHERE LEAN_CATEGORY.IDCATEGORY = :iCategoryId";

        return sql;
    }

    #endregion


    #region //===================Lean Assessment Question Answers======================

    public static string InsertLeanAssessmentAnswer()
    {
        string sql = "INSERT INTO LEAN_ASSESSMENT (IDSUSTAIN, IVALUE, IDPROJECT) VALUES (:iSustainId, :iValue, :lProjectId)";
        return sql;
    }

    public static string UpdateLeanAssessmentAnswer()
    {
        string sql = "UPDATE LEAN_ASSESSMENT SET IVALUE = :iValue WHERE IDSUSTAIN = :iSustainId AND IDPROJECT = :lProjectId";
        return sql;
    }

    public static string getLeanAssessmentAnswersByProjectId()
    {
        string sql = "SELECT IDASSESSMENT, IDPROJECT, IDSUSTAIN, IVALUE FROM LEAN_ASSESSMENT WHERE IDPROJECT = :lProjectId";
        return sql;
    }

    public static string getLeanCustomerAssessmentByProjectId()
    {
        string sql = "SELECT IDASSCUSTOMER, IDPROJECT, KEYCUSTOMERS, REVIEWERS, DATE_ASSESSED, POSITIVEFINDINGS, NEGATIVEFINDINGS FROM LEAN_ASSESSMENT_CUSTOMERS WHERE IDPROJECT = :lProjectId";
        return sql;
    }

    public static string InsertLeanAssessmentReviewers()
    {
        string sql = "INSERT INTO LEAN_ASSESSMENT_CUSTOMERS (IDPROJECT, KEYCUSTOMERS, REVIEWERS, DATE_ASSESSED, POSITIVEFINDINGS, NEGATIVEFINDINGS) VALUES (:lProjectId, :sKeyCustomers, :sReviewers, :dtAssessed, :sPositiveFindings, :sNegativeFindings)";
        return sql;
    }

    public static string UpdateLeanAssessmentReviewers()
    {
        string sql = "UPDATE LEAN_ASSESSMENT_CUSTOMERS SET KEYCUSTOMERS = :sKeyCustomers, REVIEWERS = :sReviewers, DATE_ASSESSED = :dtAssessed, POSITIVEFINDINGS = :sPositiveFindings, NEGATIVEFINDINGS = :sNegativeFindings WHERE IDPROJECT = :lProjectId";
        return sql;
    }


    #endregion

    //========================== Documents Query ==============================

    public static string getDocumentDetails()
    {
        string sql = "SELECT IDDOC, IDPROJECT, DOC_TITLE, FILE_NAME, DESCRIPTION FROM LEAN_DOCS WHERE IDDOC = :lDocumentId";
        return sql;
    }
    public static string getAllDocuments()
    {
        string sql = "SELECT IDDOC, IDPROJECT, DOC_TITLE, FILE_NAME, DESCRIPTION FROM LEAN_DOCS WHERE IDPROJECT = :lProjectId";
        return sql;
    }

    public static string CreateDocument()
    {
        string sql = "INSERT INTO LEAN_DOCS (IDPROJECT, DOC_TITLE, DESCRIPTION, FILE_NAME) VALUES (:lProjectId, :sTitle, :sDescription, :sFileName)";
        return sql;
    }

    public static string UpdateDocument()
    {
        string sql = "UPDATE LEAN_DOCS SET DOC_TITLE = :sTitle, DESCRIPTION = :sDescription WHERE IDDOC = :lDocumentId";
        return sql;
    }
    public static string DeleteDocument()
    {
        string sql = "DELETE FROM LEAN_DOCS WHERE IDDOC = :lDocumentId";
        return sql;
    }
}